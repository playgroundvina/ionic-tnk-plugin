{
  "api": {
    "name": "CapacitorPluginTnkPlugin",
    "slug": "capacitorplugintnkplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "call_tnk_bannerAd",
        "signature": "(options: { tnk_pub_id: string; placementId: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ tnk_pub_id: string; placementId: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "call_tnk_bannerad"
      },
      {
        "name": "call_tnk_nativeAd",
        "signature": "(options: { tnk_pub_id: string; placementId: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ tnk_pub_id: string; placementId: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "call_tnk_nativead"
      },
      {
        "name": "call_tnk_interstitialAd",
        "signature": "(options: { tnk_pub_id: string; placementId: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ tnk_pub_id: string; placementId: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "call_tnk_interstitialad"
      },
      {
        "name": "call_tnk_rewardedAd",
        "signature": "(options: { tnk_pub_id: string; placementId: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ tnk_pub_id: string; placementId: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "call_tnk_rewardedad"
      },
      {
        "name": "initialize",
        "signature": "(options: { appId: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ appId: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "initialize"
      },
      {
        "name": "showBanner",
        "signature": "(options: { adBannerId: string; position: string; margin: number; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ adBannerId: string; position: string; margin: number; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "showbanner"
      },
      {
        "name": "hideBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "hidebanner"
      },
      {
        "name": "removeBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "removebanner"
      },
      {
        "name": "resumeBanner",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "resumebanner"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"bannerAdLoad\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'bannerAdLoad'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerbanneradload"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"bannerError\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'bannerError'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerbannererror"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"bannerAdClick\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'bannerAdClick'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerbanneradclick"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"bannerAdShow\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'bannerAdShow'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerbanneradshow"
      },
      {
        "name": "prepareRewardVideoAd",
        "signature": "(options: { adRewardId: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ adRewardId: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "preparerewardvideoad"
      },
      {
        "name": "showRewardVideoAd",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "showrewardvideoad"
      },
      {
        "name": "isLoadedRewardVideoAd",
        "signature": "() => Promise<{ isLoadedRewardVideoAd: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ isLoadedRewardVideoAd: boolean; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isloadedrewardvideoad"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"rewardAdLoad\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'rewardAdLoad'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerrewardadload"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"rewardError\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'rewardError'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerrewarderror"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"rewardAdClick\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'rewardAdClick'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerrewardadclick"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"rewardAdShow\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'rewardAdShow'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerrewardadshow"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"rewardAdClose\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'rewardAdClose'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerrewardadclose"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"rewardAdVideoCompletion\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'rewardAdVideoCompletion'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerrewardadvideocompletion"
      },
      {
        "name": "prepareInterstitial",
        "signature": "(options: { adInterstitialId: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ adInterstitialId: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "prepareinterstitial"
      },
      {
        "name": "showInterstitial",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "showinterstitial"
      },
      {
        "name": "isLoadedInterstitial",
        "signature": "() => Promise<{ isLoadedInterstitial: boolean; }>",
        "parameters": [],
        "returns": "Promise<{ isLoadedInterstitial: boolean; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "isloadedinterstitial"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"interstitialAdLoad\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'interstitialAdLoad'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerinterstitialadload"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"interstitialError\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'interstitialError'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerinterstitialerror"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"interstitialAdClick\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'interstitialAdClick'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerinterstitialadclick"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"interstitialAdShow\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'interstitialAdShow'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerinterstitialadshow"
      },
      {
        "name": "addListener",
        "signature": "(eventName: \"interstitialAdClose\", listenerFunc: () => void) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'interstitialAdClose'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerinterstitialadclose"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}